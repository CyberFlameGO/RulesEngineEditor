@*
    // Copyright (c) Alex Reich.
    // Licensed under the CC BY 4.0 License.
*@
@using RulesEngineEditor.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@inject RulesEngineEditor.Services.WorkflowService WorkflowService

@if (rules != null)
{
    <QuickGrid Items="@rules.AsQueryable()">
        <PropertyColumn Property="@(p => p.RuleName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Operator)" Sortable="true" />
        <PropertyColumn Property="@(p => p.SuccessEvent)" Sortable="true" />
        <PropertyColumn Property="@(p => p.ErrorMessage)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Expression)" Sortable="true" />
    </QuickGrid>

    <Dropzone TItem="RuleData" Items="rules" OnItemDrop="@((i)=>RuleDragEnd(i))">
        <rules>
            <RuleEditor rule="@context" RuleDelete="DeleteRule" />
        </rules>
    </Dropzone>
}
@code {
    private List<RuleData> _rules;
    [Parameter]
    public List<RuleData> rules
    {
        get { return _rules; }
        set { _rules = value; StateHasChanged(); }
    }

    [Parameter]
    public EventCallback<List<RuleData>> RulesChanged { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    private void DeleteRule(RuleData sp)
    {
        WorkflowService.DeleteRule(rules, sp);
        RulesChanged.InvokeAsync(rules);
    }

    private void RuleDragEnd(RuleData sp)
    {
        WorkflowService.Sort(rules);
        RulesChanged.InvokeAsync(rules);
    }
}
